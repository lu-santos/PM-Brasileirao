/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package visao;

import modelo.entidade.Campeonato;
import modelo.entidade.Performance;
//import Servicos.ServicoClassificacaoEquipe;
//import Servicos.ServicoImportacaoResultado;
import java.util.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lucianna
 */
public class ClassificacaoMandante extends javax.swing.JInternalFrame {

    /**
     * Creates new form ClassificacaoMandante
     */
    
    private DefaultTableModel modelo;
//    private ServicoImportacaoResultado servicos;
//    private ServicoClassificacaoEquipe classificacaoMandante;
    private Campeonato c;
//    private List<PerformaceMandante> pM = new ArrayList<PerformaceMandante>();
    
    public ClassificacaoMandante() {
        initComponents();
        
  /*      servicos = new ServicoImportacaoResultado();
        servicos.lerArquivoXMLExistente("campeonato2013.xml");
        c = servicos.getCampeonato();
        selecionarCampeonato.addItem(c.getAno());
  */      
        String[] cabecalho = {"Posição" ,"Indicador", "Equipe", "PG", "JM", "V", "E", "D", "GP", "GC", "S", "Aproveitamento"};
        String[][] dados = {};
        modelo = new DefaultTableModel(dados, cabecalho);
        tabelaClassificacaoMandante.setModel(modelo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        selecionarCampeonato = new javax.swing.JComboBox();
        btnOk = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaClassificacaoMandante = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        labelNumeroRodada = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Classificação como Mandante");
        setMinimumSize(new java.awt.Dimension(1020, 510));
        setPreferredSize(new java.awt.Dimension(1020, 510));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Campeonato");

        selecionarCampeonato.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        btnOk.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        tabelaClassificacaoMandante.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tabelaClassificacaoMandante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null", "null", "null", "null", "null", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaClassificacaoMandante);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Rodada");

        labelNumeroRodada.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        labelNumeroRodada.setText("______");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selecionarCampeonato, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnOk)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNumeroRodada)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selecionarCampeonato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOk)
                    .addComponent(labelNumeroRodada))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
   /*     servicos.lerArquivoXMLExistente("campeonato2013.xml");
        c = servicos.getCampeonato();
        classificacaoMandante = new ServicoClassificacaoEquipe(c);
        List<PerformaceMandante> p = classificacaoMandante.obterClassificacaoMandante();
        
        Comparator<PerformaceMandante> ordemDecrescentePG = new Comparator<PerformaceMandante>(){
            public int compare(PerformaceMandante p1, PerformaceMandante p2){
                return p1.compareTo(p2);
            }
        };
        
        Collections.sort(p, ordemDecrescentePG);
        
        for(int i = 0; i < 4 ; i++){
            p.get(i).getEquipe().setIndicador("Libertadores");
        }
  
        for(int i = 19; i >15 ; i--){
            p.get(i).getEquipe().setIndicador("Rebaixado");
        }
        
        int ultimaRodada;
        int turnoDaRodada;
        if(c.getListaTurnos().get(1).getListaRodadas().isEmpty()){
            ultimaRodada = c.getListaTurnos().get(0).getListaRodadas().size()-1;
            turnoDaRodada = 0;
        }
        else{
            ultimaRodada = c.getListaTurnos().get(1).getListaRodadas().size()-1;
            turnoDaRodada = 1;
        }
        
        labelNumeroRodada.setText(String.valueOf(ultimaRodada));
         
        while(modelo.getRowCount()>0){
            modelo.removeRow(0);
        }
 
        int q = 1;
        for(int i = 0; i < p.size() ; i++){    
            int posicao = q++;
            String indicador = p.get(i).getEquipe().getIndicador();
            String equipe = p.get(i).getEquipe().getNome();
            int pontosGanhos = p.get(i).getPontosGanhosMandante();
            int jogos = p.get(i).getJogosMandante();
            int vitoria = p.get(i).getVitoriasMandante();
            int empate = p.get(i).getEmpatesMandante();
            int derrota = p.get(i).getDerrotasMandante();
            int golsPro = p.get(i).getGolsProMandante();
            int golsContra = p.get(i).getGolsContraMandante();
            int saldo = p.get(i).getSaldoMandante();
            double aproveitamento = p.get(i).getAproveitamentoMandante();
            Object dados [] = {posicao, indicador, equipe, pontosGanhos, jogos, vitoria, empate, derrota, golsPro, golsContra, saldo, aproveitamento};
            modelo.addRow(dados);
        }*/
    }//GEN-LAST:event_btnOkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelNumeroRodada;
    private javax.swing.JComboBox selecionarCampeonato;
    private javax.swing.JTable tabelaClassificacaoMandante;
    // End of variables declaration//GEN-END:variables
}
